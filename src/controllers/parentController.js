const { Student, Parent, Payment, User } = require("../models");

const parentService = require("../services/role_services/parentService");
const parentPaymentRequestService = require("../services/role_services/parentPaymentRequestService");
const studentParentRelationshipService = require("../services/relationship_services/studentParentRelationshipService");

const parentController = {
  async createNewParent(req, res) {
    try {
      const parent = await parentService.create(req.body);
      return res.status(201).json({
        msg: "T·∫°o ph·ª• huynh th√†nh c√¥ng",
        data: parent,
      });
    } catch (error) {
      return res.status(500).json({
        msg: "L·ªói khi t·∫°o ph·ª• huynh",
        error: error.message,
      });
    }
  },
  async getParentInfo(req, res) {
    try {
      const parent = await parentService.getById(req.params.parentId);
      return res.status(200).json({
        msg: "L·∫•y th√¥ng tin ph·ª• huynh th√†nh c√¥ng",
        data: parent,
      });
    } catch (error) {
      return res.status(500).json({
        msg: "L·ªói khi l·∫•y th√¥ng tin ph·ª• huynh",
        error: error.message,
      });
    }
  },
  async updateParent(req, res) {
    try {
      const updatedParent = await parentService.update(
        req.params.parentId,
        req.body
      );
      return res.status(200).json({
        msg: "C·∫≠p nh·∫≠t th√¥ng tin ph·ª• huynh th√†nh c√¥ng",
        data: updatedParent,
      });
    } catch (error) {
      return res.status(500).json({
        msg: "L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin ph·ª• huynh",
        error: error.message,
      });
    }
  },
  async deleteParent(req, res) {
    try {
      await parentService.delete(req.params.parentId);
      return res.status(200).json({
        msg: "X√≥a ph·ª• huynh th√†nh c√¥ng",
      });
    } catch (error) {
      return res.status(500).json({
        msg: "L·ªói khi x√≥a ph·ª• huynh",
        error: error.message,
      });
    }
  },

  async getAllParents(req, res) {
    try {
      const { page, limit, sort, isActive } = req.query;

      // Parse isActive ƒë·ªÉ c√≥ logic r√µ r√†ng: true, false, ho·∫∑c undefined
      let parsedIsActive;
      if (isActive === "true") {
        parsedIsActive = true;
      } else if (isActive === "false") {
        parsedIsActive = false;
      }
      // N·∫øu isActive kh√¥ng c√≥ ho·∫∑c kh√¥ng ph·∫£i "true"/"false" th√¨ ƒë·ªÉ undefined

      const options = {
        page: page ? parseInt(page) : 1,
        limit: limit ? parseInt(limit) : 10,
        sort: sort ? JSON.parse(sort) : { createdAt: -1 },
        isActive: parsedIsActive,
      };

      const result = await parentService.getAll({}, options);
      return res.status(200).json({
        msg: "L·∫•y danh s√°ch ph·ª• huynh th√†nh c√¥ng",
        data: result.parents,
        pagination: result.pagination,
      });
    } catch (error) {
      return res.status(500).json({
        msg: "L·ªói khi l·∫•y danh s√°ch ph·ª• huynh",
        error: error.message,
      });
    }
  },
  async getAllChild(req, res) {
    // ‚ùå API n√†y ƒë√£ ƒë∆∞·ª£c thay th·∫ø b·∫±ng getChildrenWithDetails
    return res.status(410).json({
      msg: "API n√†y ƒë√£ b·ªã lo·∫°i b·ªè. Vui l√≤ng s·ª≠ d·ª•ng GET /parents/:parentId/children-details",
    });
  },
  // API m·ªõi: Qu·∫£n l√Ω quan h·ªá Parent-Student (thay th·∫ø link/unlink)
  async updateParentChildren(req, res) {
    try {
      const { parentId } = req.params;
      const { action, studentId, studentIds } = req.body;

      if (!parentId) {
        return res.status(400).json({
          msg: "Thi·∫øu th√¥ng tin: parentId",
        });
      }
      // Validation action
      if (!action || !["add", "remove"].includes(action)) {
        return res.status(400).json({
          msg: "Action ph·∫£i l√† 'add' ho·∫∑c 'remove'",
        });
      } // üî• Support c·∫£ single v√† multiple students
      let studentsToProcess = [];

      if (studentId && studentIds) {
        return res.status(400).json({
          msg: "Ch·ªâ ƒë∆∞·ª£c s·ª≠ d·ª•ng m·ªôt trong hai: studentId ho·∫∑c studentIds",
        });
      }

      if (studentId) {
        // Handle both string and array for studentId
        if (Array.isArray(studentId)) {
          studentsToProcess = studentId;
        } else {
          studentsToProcess = [studentId];
        }
      } else if (studentIds && Array.isArray(studentIds)) {
        if (studentIds.length === 0) {
          return res.status(400).json({
            msg: "studentIds kh√¥ng ƒë∆∞·ª£c r·ªóng",
          });
        }
        studentsToProcess = studentIds;
      } else {
        return res.status(400).json({
          msg: "Thi·∫øu th√¥ng tin: studentId ho·∫∑c studentIds",
        });
      }

      // Process multiple students
      const result = await parentService.updateChildRelationshipBulk(
        parentId,
        action,
        studentsToProcess
      );

      const successMsg =
        studentsToProcess.length === 1
          ? `${
              action === "add" ? "Th√™m" : "X√≥a"
            } quan h·ªá parent-student th√†nh c√¥ng`
          : `${action === "add" ? "Th√™m" : "X√≥a"} ${result.summary.success}/${
              studentsToProcess.length
            } quan h·ªá parent-student th√†nh c√¥ng`;

      return res.status(200).json({
        msg: successMsg,
        data: result,
      });
    } catch (error) {
      return res.status(500).json({
        msg: "L·ªói khi c·∫≠p nh·∫≠t quan h·ªá parent-student",
        error: error.message,
      });
    }
  },

  // API chuy√™n bi·ªát: L·∫•y th√¥ng tin chi ti·∫øt c√°c con k·ªÉ c·∫£ ƒëi·ªÉm danh
  async getChildrenWithDetails(req, res) {
    try {
      const { parentId } = req.params;
      const currentUserId = req.user.id;
      const currentUserRole = req.user.role;

      // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu: Parent ch·ªâ c√≥ th·ªÉ xem th√¥ng tin con c·ªßa m√¨nh
      if (currentUserRole === "Parent") {
        // L·∫•y parent record d·ª±a tr√™n userId t·ª´ token
        const currentParent = await Parent.findOne({ userId: currentUserId });
        if (!currentParent) {
          return res.status(404).json({
            msg: "Kh√¥ng t√¨m th·∫•y th√¥ng tin ph·ª• huynh",
          });
        }

        // S·ª≠ d·ª•ng parentId t·ª´ token thay v√¨ t·ª´ params
        const tokenParentId = currentParent._id.toString();

        // N·∫øu c√≥ parentId trong params, ki·ªÉm tra c√≥ kh·ªõp v·ªõi token kh√¥ng
        if (parentId && parentId !== tokenParentId) {
          return res.status(403).json({
            msg: "B·∫°n ch·ªâ c√≥ th·ªÉ xem th√¥ng tin con c·ªßa m√¨nh",
          });
        }

        // S·ª≠ d·ª•ng parentId t·ª´ token ƒë·ªÉ l·∫•y data
        const children = await parentService.getChildrenWithDetails(
          tokenParentId
        );
        return res.status(200).json({
          msg: "L·∫•y th√¥ng tin chi ti·∫øt c√°c con th√†nh c√¥ng",
          data: children,
        });
      }
      // Admin c√≥ th·ªÉ xem b·∫•t k·ª≥ parent n√†o
      else if (currentUserRole === "Admin") {
        const children = await parentService.getChildrenWithDetails(parentId);
        return res.status(200).json({
          msg: "L·∫•y th√¥ng tin chi ti·∫øt c√°c con th√†nh c√¥ng",
          data: children,
        });
      } else {
        return res.status(403).json({
          msg: "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p API n√†y",
        });
      }
    } catch (error) {
      return res.status(500).json({
        msg: "L·ªói khi l·∫•y th√¥ng tin chi ti·∫øt c√°c con",
        error: error.message,
      });
    }
  },

  // API m·ªõi: L·∫•y th√¥ng tin h·ªçc ph√≠ ch∆∞a ƒë√≥ng c·ªßa c√°c con
  async getChildrenUnpaidPayments(req, res) {
    try {
      const { parentId } = req.params;
      const { month, year } = req.query;
      const currentUserId = req.user.id;
      const currentUserRole = req.user.role;

      // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu: Parent ch·ªâ c√≥ th·ªÉ xem th√¥ng tin h·ªçc ph√≠ con c·ªßa m√¨nh
      if (currentUserRole === "Parent") {
        // L·∫•y parent record d·ª±a tr√™n userId t·ª´ token
        const currentParent = await Parent.findOne({ userId: currentUserId });
        if (!currentParent) {
          return res.status(404).json({
            msg: "Kh√¥ng t√¨m th·∫•y th√¥ng tin ph·ª• huynh",
          });
        }

        // S·ª≠ d·ª•ng parentId t·ª´ token thay v√¨ t·ª´ params
        const tokenParentId = currentParent._id.toString();

        // N·∫øu c√≥ parentId trong params, ki·ªÉm tra c√≥ kh·ªõp v·ªõi token kh√¥ng
        if (parentId && parentId !== tokenParentId) {
          return res.status(403).json({
            msg: "B·∫°n ch·ªâ c√≥ th·ªÉ xem th√¥ng tin h·ªçc ph√≠ con c·ªßa m√¨nh",
          });
        }

        // S·ª≠ d·ª•ng parentId t·ª´ token ƒë·ªÉ l·∫•y data
        const result = await parentService.getChildrenUnpaidPayments(
          tokenParentId,
          {
            month,
            year,
          }
        );

        return res.status(200).json({
          msg: "L·∫•y th√¥ng tin h·ªçc ph√≠ ch∆∞a ƒë√≥ng th√†nh c√¥ng",
          data: result,
        });
      }
      // Admin c√≥ th·ªÉ xem b·∫•t k·ª≥ parent n√†o
      else if (currentUserRole === "Admin") {
        const result = await parentService.getChildrenUnpaidPayments(parentId, {
          month,
          year,
        });

        return res.status(200).json({
          msg: "L·∫•y th√¥ng tin h·ªçc ph√≠ ch∆∞a ƒë√≥ng th√†nh c√¥ng",
          data: result,
        });
      } else {
        return res.status(403).json({
          msg: "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p API n√†y",
        });
      }
    } catch (error) {
      return res.status(500).json({
        msg: "L·ªói khi l·∫•y th√¥ng tin h·ªçc ph√≠ ch∆∞a ƒë√≥ng",
        error: error.message,
      });
    }
  }, // API m·ªõi: T·∫°o y√™u c·∫ßu thanh to√°n
  async createPaymentRequest(req, res) {
    try {
      const { parentId } = req.params;
      const currentUserId = req.user.id;
      const currentUserRole = req.user.role;

      // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu: Parent ch·ªâ c√≥ th·ªÉ t·∫°o y√™u c·∫ßu thanh to√°n cho m√¨nh
      if (currentUserRole === "Parent") {
        // L·∫•y parent record d·ª±a tr√™n userId t·ª´ token
        const currentParent = await Parent.findOne({ userId: currentUserId });
        if (!currentParent) {
          return res.status(404).json({
            msg: "Kh√¥ng t√¨m th·∫•y th√¥ng tin ph·ª• huynh",
          });
        }

        // S·ª≠ d·ª•ng parentId t·ª´ token thay v√¨ t·ª´ params
        const tokenParentId = currentParent._id.toString();

        // N·∫øu c√≥ parentId trong params, ki·ªÉm tra c√≥ kh·ªõp v·ªõi token kh√¥ng
        if (parentId && parentId !== tokenParentId) {
          return res.status(403).json({
            msg: "B·∫°n ch·ªâ c√≥ th·ªÉ t·∫°o y√™u c·∫ßu thanh to√°n cho m√¨nh",
          });
        }

        // V·ªõi .fields(), file s·∫Ω ·ªü trong req.files
        const uploadedFile =
          req.files && req.files["proof"] ? req.files["proof"][0] : null;

        const requestData = {
          ...req.body,
          parentId: tokenParentId, // S·ª≠ d·ª•ng parentId t·ª´ token
          uploadedFile, // File t·ª´ multer middleware
        };

        const paymentRequest =
          await parentPaymentRequestService.createPaymentRequest(
            requestData,
            req
          );

        return res.status(201).json({
          msg: "T·∫°o y√™u c·∫ßu thanh to√°n th√†nh c√¥ng",
          data: paymentRequest,
        });
      }
      // Admin c√≥ th·ªÉ t·∫°o y√™u c·∫ßu cho b·∫•t k·ª≥ parent n√†o
      else if (currentUserRole === "Admin") {
        // V·ªõi .fields(), file s·∫Ω ·ªü trong req.files
        const uploadedFile =
          req.files && req.files["proof"] ? req.files["proof"][0] : null;

        const requestData = {
          ...req.body,
          parentId,
          uploadedFile, // File t·ª´ multer middleware
        };

        const paymentRequest =
          await parentPaymentRequestService.createPaymentRequest(
            requestData,
            req
          );

        return res.status(201).json({
          msg: "T·∫°o y√™u c·∫ßu thanh to√°n th√†nh c√¥ng",
          data: paymentRequest,
        });
      } else {
        return res.status(403).json({
          msg: "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p API n√†y",
        });
      }
    } catch (error) {
      return res.status(500).json({
        msg: "L·ªói khi t·∫°o y√™u c·∫ßu thanh to√°n",
        error: error.message,
      });
    }
  },

  // API m·ªõi: L·∫•y danh s√°ch y√™u c·∫ßu thanh to√°n c·ªßa ph·ª• huynh
  async getPaymentRequests(req, res) {
    try {
      const { parentId } = req.params;
      const { status, page, limit } = req.query;
      const currentUserId = req.user.id;
      const currentUserRole = req.user.role;

      // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu: Parent ch·ªâ c√≥ th·ªÉ xem y√™u c·∫ßu thanh to√°n c·ªßa m√¨nh
      if (currentUserRole === "Parent") {
        // L·∫•y parent record d·ª±a tr√™n userId t·ª´ token
        const currentParent = await Parent.findOne({ userId: currentUserId });
        if (!currentParent) {
          return res.status(404).json({
            msg: "Kh√¥ng t√¨m th·∫•y th√¥ng tin ph·ª• huynh",
          });
        }

        // S·ª≠ d·ª•ng parentId t·ª´ token thay v√¨ t·ª´ params
        const tokenParentId = currentParent._id.toString();

        // N·∫øu c√≥ parentId trong params, ki·ªÉm tra c√≥ kh·ªõp v·ªõi token kh√¥ng
        if (parentId && parentId !== tokenParentId) {
          return res.status(403).json({
            msg: "B·∫°n ch·ªâ c√≥ th·ªÉ xem y√™u c·∫ßu thanh to√°n c·ªßa m√¨nh",
          });
        }

        // S·ª≠ d·ª•ng parentId t·ª´ token ƒë·ªÉ l·∫•y data
        const result =
          await parentPaymentRequestService.getParentPaymentRequests(
            tokenParentId,
            {
              status,
              page: page ? parseInt(page) : 1,
              limit: limit ? parseInt(limit) : 10,
            }
          );

        return res.status(200).json({
          msg: "L·∫•y danh s√°ch y√™u c·∫ßu thanh to√°n th√†nh c√¥ng",
          data: result.requests,
          pagination: result.pagination,
        });
      }
      // Admin c√≥ th·ªÉ xem b·∫•t k·ª≥ parent n√†o
      else if (currentUserRole === "Admin") {
        const result =
          await parentPaymentRequestService.getParentPaymentRequests(parentId, {
            status,
            page: page ? parseInt(page) : 1,
            limit: limit ? parseInt(limit) : 10,
          });

        return res.status(200).json({
          msg: "L·∫•y danh s√°ch y√™u c·∫ßu thanh to√°n th√†nh c√¥ng",
          data: result.requests,
          pagination: result.pagination,
        });
      } else {
        return res.status(403).json({
          msg: "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p API n√†y",
        });
      }
    } catch (error) {
      return res.status(500).json({
        msg: "L·ªói khi l·∫•y danh s√°ch y√™u c·∫ßu thanh to√°n",
        error: error.message,
      });
    }
  },

  async getChildPayments(req, res) {
    try {
      const { studentId } = req.params;
      const { month, year } = req.query;

      const filter = { studentId };
      if (month) filter.month = parseInt(month);
      if (year) filter.year = parseInt(year);

      const payments = await Payment.find(filter)
        .populate("classId", "className")
        .sort({ year: -1, month: -1 });

      // T√≠nh t·ªïng h·ªçc ph√≠ ch∆∞a ƒë√≥ng
      let totalDue = 0;
      for (const payment of payments) {
        const due = payment.amountDue - payment.amountPaid;
        if (due > 0) totalDue += due;
      }

      return res.status(200).json({
        msg: "L·∫•y th√¥ng tin h·ªçc ph√≠ th√†nh c√¥ng",
        data: {
          payments,
          totalDue,
        },
      });
    } catch (error) {
      return res.status(500).json({
        msg: "L·ªói khi l·∫•y th√¥ng tin h·ªçc ph√≠",
        error: error.message,
      });
    }
  },

  // API m·ªõi: Admin l·∫•y t·∫•t c·∫£ y√™u c·∫ßu thanh to√°n (c√≥ k√®m ·∫£nh)
  async getAllPaymentRequests(req, res) {
    try {
      const { status, page, limit, parentId, studentId } = req.query;

      const result = await parentPaymentRequestService.getAllPaymentRequests({
        status,
        page: page ? parseInt(page) : 1,
        limit: limit ? parseInt(limit) : 10,
        parentId,
        studentId,
      });

      return res.status(200).json({
        msg: "L·∫•y danh s√°ch t·∫•t c·∫£ y√™u c·∫ßu thanh to√°n th√†nh c√¥ng",
        data: result.requests,
        pagination: result.pagination,
      });
    } catch (error) {
      return res.status(500).json({
        msg: "L·ªói khi l·∫•y danh s√°ch y√™u c·∫ßu thanh to√°n",
        error: error.message,
      });
    }
  },

  // API m·ªõi: Admin/Teacher x·ª≠ l√Ω y√™u c·∫ßu thanh to√°n (approve/reject)
  async processPaymentRequest(req, res) {
    try {
      const { requestId } = req.params;
      const { action, adminNote } = req.body;

      // processedBy s·∫Ω l√† ID c·ªßa admin/teacher ƒëang ƒëƒÉng nh·∫≠p
      const processedBy = req.user?.id || req.body.processedBy;

      const result = await parentPaymentRequestService.processPaymentRequest(
        requestId,
        {
          action,
          adminNote,
          processedBy,
        }
      );

      return res.status(200).json({
        msg: `${
          action === "approved" ? "Duy·ªát" : "T·ª´ ch·ªëi"
        } y√™u c·∫ßu thanh to√°n th√†nh c√¥ng`,
        data: result,
      });
    } catch (error) {
      return res.status(500).json({
        msg: "L·ªói khi x·ª≠ l√Ω y√™u c·∫ßu thanh to√°n",
        error: error.message,
      });
    }
  },

  // Soft delete parent (ch·ªâ admin)
  async softDeleteParent(req, res) {
    try {
      // Ch·ªâ admin m·ªõi c√≥ quy·ªÅn
      if (req.user.role !== "Admin") {
        return res.status(403).json({
          msg: "Ch·ªâ Admin m·ªõi c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y",
        });
      }

      const { parentId } = req.params;

      const result = await parentService.softDelete(parentId);

      return res.status(200).json({
        msg: "X√≥a m·ªÅm parent th√†nh c√¥ng",
        parent: result,
      });
    } catch (error) {
      return res.status(500).json({
        msg: "L·ªói khi x√≥a m·ªÅm parent",
        error: error.message,
      });
    }
  },
};
module.exports = parentController;
