const classService = require("../services/role_services/classService");

const classController = {
  async createNewClass(req, res) {
    try {
      const newClass = await classService.create(req.body);
      return res.status(201).json({
        msg: "T·∫°o l·ªõp h·ªçc th√†nh c√¥ng",
        data: newClass,
      });
    } catch (error) {
      return res.status(500).json({
        msg: "L·ªói khi t·∫°o l·ªõp h·ªçc",
        error: error.message,
      });
    }
  },
  async getClassInfo(req, res) {
    try {
      const { include } = req.query;
      const includeOptions = {
        schedule: include && include.includes("schedule"),
        students: include && include.includes("students"),
        attendance: include && include.includes("attendance"),
        detailed: include && include.includes("detailed"),
      };

      if (!req.params.classId) {
        return res.status(400).json({
          msg: "Thi·∫øu th√¥ng tin ID l·ªõp h·ªçc",
        });
      }

      // Ki·ªÉm tra quy·ªÅn: Teacher ch·ªâ ƒë∆∞·ª£c xem l·ªõp m√¨nh d·∫°y
      if (req.user.role === "Teacher") {
        const hasPermission = await classService.checkTeacherClassPermission(
          req.user.roleId, // S·ª≠ d·ª•ng roleId thay v√¨ teacherId
          req.params.classId
        );

        if (!hasPermission) {
          return res.status(403).json({
            msg: "B·∫°n kh√¥ng c√≥ quy·ªÅn xem l·ªõp h·ªçc n√†y",
          });
        }
      }

      const classData = await classService.getById(
        req.params.classId,
        includeOptions
      );

      return res.status(200).json({
        msg: "L·∫•y th√¥ng tin l·ªõp h·ªçc th√†nh c√¥ng",
        data: classData,
      });
    } catch (error) {
      return res.status(500).json({
        msg: "L·ªói khi l·∫•y th√¥ng tin l·ªõp h·ªçc",
        error: error.message,
      });
    }
  },

  // ‚úÖ REMOVED: Schedule information is now included via ?include=schedule parameter
  // in the getClassInfo method above, eliminating the need for a separate endpoint
  //
  // async getClassSchedule(req, res) { ... }
  async updateClass(req, res) {
    try {
      const { classId } = req.params;
      const updates = req.body;

      // üî• X·ª≠ l√Ω th√™m students v·ªõi discount
      if (updates.studentsWithDiscount) {
        const result = await classService.addStudentsWithDiscount(
          classId,
          updates.studentsWithDiscount
        );

        return res.status(200).json({
          msg: "Th√™m h·ªçc sinh v√†o l·ªõp v·ªõi discount th√†nh c√¥ng",
          data: result,
        });
      }

      // Logic update class b√¨nh th∆∞·ªùng
      const updatedClass = await classService.update(
        req.params.classId,
        req.body
      );
      return res.status(200).json({
        msg: "C·∫≠p nh·∫≠t th√¥ng tin l·ªõp h·ªçc th√†nh c√¥ng",
        data: updatedClass,
      });
    } catch (error) {
      return res.status(500).json({
        msg: "L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin l·ªõp h·ªçc",
        error: error.message,
      });
    }
  },

  async deleteClass(req, res) {
    try {
      const { hardDelete } = req.query;
      const result = await classService.delete(
        req.params.classId,
        hardDelete === "true"
      );
      return res.status(200).json({
        msg: result.message,
      });
    } catch (error) {
      return res.status(500).json({
        msg: "L·ªói khi x√≥a l·ªõp h·ªçc",
        error: error.message,
      });
    }
  },
  async getAllClasses(req, res) {
    try {
      const {
        page,
        limit,
        sort,
        year,
        grade,
        isAvailable,
        teacherId,
        summary,
      } = req.query;

      // Build filter object
      const filter = {};
      if (year && year.trim()) filter.year = parseInt(year);
      if (grade && grade.trim()) filter.grade = parseInt(grade);
      if (isAvailable && isAvailable.trim()) {
        filter.isAvailable = isAvailable === "true";
      }

      // Filter by role: Teacher ch·ªâ xem l·ªõp m√¨nh d·∫°y
      if (req.user.role === "Teacher") {
        filter.teacherId = req.user.roleId; // S·ª≠ d·ª•ng roleId thay v√¨ teacherId
      } else if (teacherId && teacherId.trim()) {
        // Admin c√≥ th·ªÉ filter theo teacherId
        filter.teacherId = teacherId;
      }

      const options = {
        page: page ? parseInt(page) : 1,
        limit: limit ? parseInt(limit) : 10,
        sort: sort ? JSON.parse(sort) : { createdAt: -1 },
        summary: summary === "true", // Ch·ªâ tr·∫£ v·ªÅ th√¥ng tin c∆° b·∫£n cho list view
      };

      const result = await classService.getAll(filter, options);

      return res.status(200).json({
        msg: "L·∫•y danh s√°ch l·ªõp h·ªçc th√†nh c√¥ng",
        data: result.classes,
        pagination: result.pagination,
      });
    } catch (error) {
      return res.status(500).json({
        msg: "L·ªói khi l·∫•y danh s√°ch l·ªõp h·ªçc",
        error: error.message,
      });
    }
  },
  // ‚úÖ REMOVED: These methods are now handled by the unified PATCH /classes/:classId endpoint
  // which can handle all class updates including student/teacher assignments through req.body

  // async addStudentToClass(req, res) { ... }
  // async removeStudentFromClass(req, res) { ... }
  // async assignTeacher(req, res) { ... }
  // async removeTeacherFromClass(req, res) { ... }
  // async addMultipleStudents(req, res) { ... }
  // async removeMultipleStudents(req, res) { ... }

  async getClassesOverview(req, res) {
    try {
      const overview = await classService.getClassesOverview();
      return res.status(200).json({
        msg: "L·∫•y th·ªëng k√™ t·ªïng quan l·ªõp h·ªçc th√†nh c√¥ng",
        data: overview,
      });
    } catch (error) {
      return res.status(500).json({
        msg: "L·ªói khi l·∫•y th·ªëng k√™ t·ªïng quan l·ªõp h·ªçc",
        error: error.message,
      });
    }
  },

  async getAvailableTeachers(req, res) {
    try {
      const { excludeClassId } = req.query;
      const teachers = await classService.getAvailableTeachers(excludeClassId);

      return res.status(200).json({
        msg: "L·∫•y danh s√°ch gi√°o vi√™n available th√†nh c√¥ng",
        data: teachers,
      });
    } catch (error) {
      return res.status(500).json({
        msg: "L·ªói khi l·∫•y danh s√°ch gi√°o vi√™n available",
        error: error.message,
      });
    }
  },

  async getAvailableStudents(req, res) {
    try {
      const { excludeClassId } = req.query;
      const students = await classService.getAvailableStudents(excludeClassId);

      return res.status(200).json({
        msg: "L·∫•y danh s√°ch h·ªçc sinh available th√†nh c√¥ng",
        data: students,
      });
    } catch (error) {
      return res.status(500).json({
        msg: "L·ªói khi l·∫•y danh s√°ch h·ªçc sinh available",
        error: error.message,
      });
    }
  },
  // ‚úÖ REMOVED: Consolidated into teacherController.getTeacherClasses
  // This eliminates API duplication and centralizes teacher-related operations
};

module.exports = classController;
